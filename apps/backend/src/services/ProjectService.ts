import { ProjectConfig, ProjectChat, ChatMessage } from '../types/project';
import { AIArchitectService } from './AIArchitect';
import { GitService } from './GitService';
import { FileSystemService } from './FileSystem';
import path from 'path';
import fs from 'fs/promises';

export class ProjectService {
  private projects: Map<string, ProjectConfig>;
  private chats: Map<string, ProjectChat>;
  private gitServices: Map<string, GitService>;
  private fileSystem: FileSystemService;
  private aiArchitect: AIArchitectService;
  private baseProjectsPath: string;

  constructor(baseProjectsPath: string) {
    this.projects = new Map();
    this.chats = new Map();
    this.gitServices = new Map();
    this.fileSystem = new FileSystemService();
    this.aiArchitect = new AIArchitectService();
    this.baseProjectsPath = baseProjectsPath;
  }

  async createProject(
    name: string,
    description: string,
    gitRepo?: string
  ): Promise<ProjectConfig> {
    try {
      const projectId = this.generateId();
      const projectPath = path.join(this.baseProjectsPath, name);

      // Ensure the base projects directory exists
      await this.fileSystem.ensureDirectoryExists(this.baseProjectsPath);

      // Create project directory if it doesn't exist
      await this.fileSystem.ensureDirectoryExists(projectPath);

      // Initialize Git
      const gitService = new GitService(projectPath);
      if (gitRepo) {
        console.log('Cloning repository:', gitRepo);
        await gitService.cloneRepository(gitRepo);
      } else {
        console.log('Initializing new repository');
        await gitService.initializeRepository();
      }

      const project: ProjectConfig = {
        name,
        path: projectPath,
        description,
        systemPrompt: '', // Will be generated by AI
        gitRepo: gitRepo || '',
        status: 'defining',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // Store project and git service
      this.projects.set(projectId, project);
      this.gitServices.set(projectId, gitService);

      // Initialize project chat
      const chat: ProjectChat = {
        id: this.generateId(),
        projectId,
        messages: [{
          role: 'assistant',
          content: 'Hello! I\'m your AI Architect. Let\'s define your project together.',
          timestamp: new Date()
        }],
        createdAt: new Date(),
        updatedAt: new Date()
      };
      this.chats.set(projectId, chat);

      console.log('Project created successfully:', project);
      return project;
    } catch (error) {
      console.error('Error in createProject:', error);
      throw error;
    }
  }

  async resetProject(projectId: string): Promise<void> {
    try {
      // Clear project from memory
      this.projects.delete(projectId);
      this.chats.delete(projectId);
      this.gitServices.delete(projectId);

      // List all directories in the projects folder
      const entries = await fs.readdir(this.baseProjectsPath, { withFileTypes: true });
      const directories = entries.filter(entry => entry.isDirectory());

      // Remove each directory
      for (const dir of directories) {
        const dirPath = path.join(this.baseProjectsPath, dir.name);
        try {
          await fs.rm(dirPath, { recursive: true, force: true });
          console.log('Removed directory:', dirPath);
        } catch (error) {
          console.error('Error removing directory:', dirPath, error);
        }
      }

      // Ensure the base projects directory exists
      await this.fileSystem.ensureDirectoryExists(this.baseProjectsPath);

      console.log('Project reset successfully:', projectId);
    } catch (error) {
      console.error('Error in resetProject:', error);
      throw error;
    }
  }

  async updateProjectDescription(
    projectId: string,
    description: string
  ): Promise<ProjectConfig> {
    const project = this.getProject(projectId);
    project.description = description;
    project.updatedAt = new Date();
    this.projects.set(projectId, project);
    return project;
  }

  async generateSystemPrompt(projectId: string): Promise<ProjectConfig> {
    const project = this.getProject(projectId);
    const systemPrompt = await this.aiArchitect.generateSystemPrompt(project.description);
    project.systemPrompt = systemPrompt;
    project.updatedAt = new Date();
    this.projects.set(projectId, project);
    return project;
  }

  getProject(projectId: string): ProjectConfig {
    const project = this.projects.get(projectId);
    if (!project) {
      throw new Error('Project not found');
    }
    return project;
  }

  getProjectChat(projectId: string): ProjectChat {
    const chat = this.chats.get(projectId);
    if (!chat) {
      throw new Error('Project chat not found');
    }
    return chat;
  }

  async commitProjectChanges(projectId: string, message: string): Promise<void> {
    const gitService = this.gitServices.get(projectId);
    if (!gitService) {
      throw new Error('Git service not found for project');
    }
    await gitService.commitChanges(message);
  }

  async createFeatureBranch(projectId: string, featureName: string): Promise<void> {
    const gitService = this.gitServices.get(projectId);
    if (!gitService) {
      throw new Error('Git service not found for project');
    }
    await gitService.createFeatureBranch(featureName);
  }

  private generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }
}
