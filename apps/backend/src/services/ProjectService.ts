import { ProjectConfig, ProjectChat, ChatMessage } from '../types/project';
import { BacklogItem } from '../types/backlog';
import { AIArchitectService } from './AIArchitect';
import { GitService } from './GitService';
import { BacklogService } from './BacklogService';
import path from 'path';

export class ProjectService {
  private projects: Map<string, ProjectConfig>;
  private chats: Map<string, ProjectChat>;
  private aiArchitect: AIArchitectService;
  private backlogService: BacklogService;
  private gitServices: Map<string, GitService>;
  private baseProjectsPath: string;

  constructor(baseProjectsPath: string) {
    this.projects = new Map();
    this.chats = new Map();
    this.gitServices = new Map();
    this.aiArchitect = new AIArchitectService();
    this.backlogService = new BacklogService();
    this.baseProjectsPath = baseProjectsPath;
  }

  async createProject(
    name: string,
    description: string,
    gitRepo?: string
  ): Promise<ProjectConfig> {
    const projectId = this.generateId();
    const projectPath = path.join(this.baseProjectsPath, name);

    const project: ProjectConfig = {
      name,
      path: projectPath,
      description,
      systemPrompt: '', // Will be generated by AI
      gitRepo: gitRepo || '',
      status: 'defining',
      createdAt: new Date(),
      updatedAt: new Date()
    };

    // Initialize Git
    const gitService = new GitService(projectPath);
    if (gitRepo) {
      await gitService.cloneRepository(gitRepo);
    } else {
      await gitService.initializeRepository();
    }
    this.gitServices.set(projectId, gitService);

    // Initialize project chat
    const chat: ProjectChat = {
      id: this.generateId(),
      projectId,
      messages: [{
        role: 'assistant',
        content: 'Hello! I\'m your AI Architect. Let\'s define your project together.',
        timestamp: new Date()
      }],
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.projects.set(projectId, project);
    this.chats.set(projectId, chat);

    return project;
  }

  async updateProjectDescription(
    projectId: string,
    description: string
  ): Promise<ProjectConfig> {
    const project = this.getProject(projectId);
    project.description = description;
    project.updatedAt = new Date();
    this.projects.set(projectId, project);
    return project;
  }

  async generateSystemPrompt(projectId: string): Promise<ProjectConfig> {
    const project = this.getProject(projectId);
    const systemPrompt = await this.aiArchitect.generateSystemPrompt(project.description);
    project.systemPrompt = systemPrompt;
    project.updatedAt = new Date();
    this.projects.set(projectId, project);
    return project;
  }

  async generateBacklogItems(projectId: string): Promise<BacklogItem[]> {
    const project = this.getProject(projectId);
    return this.backlogService.generateBacklogItems(
      projectId,
      project.description,
      project.systemPrompt
    );
  }

  async chatWithAI(projectId: string, message: string): Promise<ChatMessage> {
    const chat = this.getProjectChat(projectId);
    
    // Add user message
    const userMessage: ChatMessage = {
      role: 'user',
      content: message,
      timestamp: new Date()
    };
    chat.messages.push(userMessage);

    // Get AI response
    const aiResponse = await this.aiArchitect.chat(chat.messages.map(m => ({
      role: m.role,
      content: m.content
    })));

    // Add AI response
    const aiMessage: ChatMessage = {
      role: 'assistant',
      content: aiResponse,
      timestamp: new Date()
    };
    chat.messages.push(aiMessage);

    chat.updatedAt = new Date();
    this.chats.set(projectId, chat);

    return aiMessage;
  }

  getProject(projectId: string): ProjectConfig {
    const project = this.projects.get(projectId);
    if (!project) {
      throw new Error('Project not found');
    }
    return project;
  }

  getProjectChat(projectId: string): ProjectChat {
    const chat = this.chats.get(projectId);
    if (!chat) {
      throw new Error('Project chat not found');
    }
    return chat;
  }

  async commitProjectChanges(projectId: string, message: string): Promise<void> {
    const gitService = this.gitServices.get(projectId);
    if (!gitService) {
      throw new Error('Git service not found for project');
    }
    await gitService.commitChanges(message);
  }

  async createFeatureBranch(projectId: string, featureName: string): Promise<void> {
    const gitService = this.gitServices.get(projectId);
    if (!gitService) {
      throw new Error('Git service not found for project');
    }
    await gitService.createFeatureBranch(featureName);
  }

  private generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }
}
