import * as vscode from 'vscode';

import { AIService } from './aiService';
import { LanguageService } from './languageService';

export class CompletionProvider implements vscode.CompletionItemProvider {
  private readonly aiService: AIService;
  private readonly languageService: LanguageService;

  constructor() {
    this.aiService = new AIService();
    this.languageService = new LanguageService();
  }

  public async provideCompletionItems(
    document: vscode.TextDocument,
    position: vscode.Position,
    _token: vscode.CancellationToken,
    _context: vscode.CompletionContext
  ): Promise<vscode.CompletionItem[]> {
    try {
      const linePrefix = document.lineAt(position).text.substring(0, position.character);

      if (linePrefix.trim().length === 0) {
        return [];
      }

      const suggestions = await this.aiService.getCompletionSuggestions(linePrefix);
      const language = this.languageService.getLanguageId(document.getText());

      return this.createCompletionItems(suggestions.toString(), language);
    } catch (error) {
      void vscode.window.showErrorMessage(`Error getting completions: ${error}`);
      return [];
    }
  }

  private createCompletionItems(suggestions: string, language: string): vscode.CompletionItem[] {
    const items: vscode.CompletionItem[] = [];

    // Split suggestions into individual items
    const suggestionLines = suggestions.split('\n').filter(line => line.trim().length > 0);

    for (const suggestion of suggestionLines) {
      const item = new vscode.CompletionItem(suggestion, vscode.CompletionItemKind.Snippet);
      item.detail = `AI suggestion (${language})`;
      item.documentation = new vscode.MarkdownString('Generated by NeuroForge AI Assistant');
      items.push(item);
    }

    return items;
  }
}
